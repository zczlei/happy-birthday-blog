"use client"

import { useState, useEffect } from "react"
import { useParams, useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ArrowLeft, Clock, User, Eye, Share2, Bookmark, ThumbsUp, MessageCircle } from "lucide-react"
import Image from "next/image"

interface BlogPost {
  id: number
  title: string
  excerpt: string
  content: string
  tags: string[]
  author: string
  publishedAt: string
  readTime: string
  image: string
  featured: boolean
  views: number
  likes: number
  comments: Comment[]
}

interface Comment {
  id: number
  author: string
  content: string
  publishedAt: string
  likes: number
}

// Mock data for blog posts
const getBlogById = (id: string): BlogPost | null => {
  const posts: Record<string, BlogPost> = {
    "1": {
      id: 1,
      title: "Complete Guide to DeFi Yield Farming: Strategies and Risks",
      excerpt:
        "Learn everything you need to know about yield farming in DeFi, including the best strategies, risk management, and platform comparisons.",
      content: `
        <p>Yield farming has become one of the most popular ways to earn passive income in the decentralized finance (DeFi) ecosystem. This comprehensive guide will walk you through everything you need to know to get started with yield farming safely and effectively.</p>
        
        <h2>What is Yield Farming?</h2>
        <p>Yield farming, also known as liquidity mining, is the practice of lending or staking cryptocurrency tokens to generate high returns or rewards in the form of additional cryptocurrency. It involves providing liquidity to decentralized exchanges (DEXs) and other DeFi protocols in exchange for rewards.</p>
        
        <h2>How Yield Farming Works</h2>
        <p>The basic concept is simple: you deposit your crypto assets into a liquidity pool, and in return, you earn rewards. These rewards can come in various forms:</p>
        <ul>
          <li><strong>Trading fees:</strong> A portion of the fees generated by trades in the pool</li>
          <li><strong>Governance tokens:</strong> Native tokens of the protocol</li>
          <li><strong>Additional yield:</strong> Bonus rewards for participating in specific pools</li>
        </ul>
        
        <h2>Popular Yield Farming Strategies</h2>
        <h3>1. Liquidity Provision</h3>
        <p>The most straightforward strategy involves providing liquidity to automated market makers (AMMs) like Uniswap, SushiSwap, or PancakeSwap. You deposit two tokens in equal value to create a liquidity pair.</p>
        
        <h3>2. Lending and Borrowing</h3>
        <p>Platforms like Aave and Compound allow you to lend your assets to earn interest, or borrow against your collateral to access additional capital for farming.</p>
        
        <h3>3. Staking</h3>
        <p>Many protocols offer staking rewards for holding and staking their native tokens. This is often the safest form of yield farming.</p>
        
        <h2>Risks to Consider</h2>
        <p>While yield farming can be profitable, it's important to understand the risks:</p>
        <ul>
          <li><strong>Impermanent Loss:</strong> When providing liquidity, you may lose value if token prices diverge significantly</li>
          <li><strong>Smart Contract Risk:</strong> Bugs or exploits in smart contracts can lead to loss of funds</li>
          <li><strong>Regulatory Risk:</strong> Changing regulations could affect the viability of certain protocols</li>
          <li><strong>Market Risk:</strong> Cryptocurrency prices are volatile and can affect your returns</li>
        </ul>
        
        <h2>Getting Started</h2>
        <p>To begin yield farming, you'll need:</p>
        <ol>
          <li>A Web3 wallet like MetaMask</li>
          <li>Cryptocurrency to deposit (start small while learning)</li>
          <li>ETH for gas fees (on Ethereum) or BNB (on BSC)</li>
          <li>Research on reputable protocols and current yields</li>
        </ol>
        
        <h2>Best Practices</h2>
        <ul>
          <li>Start with established, audited protocols</li>
          <li>Diversify across multiple pools and strategies</li>
          <li>Monitor your positions regularly</li>
          <li>Keep track of gas fees and ensure they don't eat into profits</li>
          <li>Stay informed about protocol updates and market conditions</li>
        </ul>
        
        <h2>Conclusion</h2>
        <p>Yield farming can be a rewarding way to put your crypto assets to work, but it requires careful research and risk management. Start small, learn the basics, and gradually increase your involvement as you become more comfortable with the ecosystem.</p>
      `,
      tags: ["Tutorial", "DeFi", "Guide"],
      author: "Alex Chen",
      publishedAt: "2025-01-15",
      readTime: "12 min read",
      image: "/blog-defi-yield-farming.png",
      featured: true,
      views: 2847,
      likes: 892,
      comments: [
        {
          id: 1,
          author: "CryptoNewbie",
          content:
            "Great guide! This really helped me understand the basics of yield farming. Starting with small amounts as suggested.",
          publishedAt: "2025-01-16",
          likes: 15,
        },
        {
          id: 2,
          author: "DeFiExpert",
          content:
            "Excellent breakdown of the risks involved. Too many people jump into yield farming without understanding impermanent loss.",
          publishedAt: "2025-01-16",
          likes: 23,
        },
      ],
    },
    "2": {
      id: 2,
      title: "Understanding Smart Contract Security: Common Vulnerabilities",
      excerpt:
        "Explore the most common smart contract vulnerabilities and learn how to identify and prevent security issues in your blockchain applications.",
      content: `
        <p>Smart contract security is paramount in the blockchain ecosystem. A single vulnerability can lead to millions of dollars in losses. This guide covers essential security practices that every smart contract developer should implement.</p>
        
        <h2>Common Vulnerabilities</h2>
        <h3>Reentrancy Attacks</h3>
        <p>One of the most famous vulnerabilities, reentrancy occurs when a contract calls an external contract before updating its internal state. The external contract can then call back into the original contract, potentially draining funds.</p>
        
        <h3>Integer Overflow/Underflow</h3>
        <p>Before Solidity 0.8.0, arithmetic operations could overflow or underflow without reverting, leading to unexpected behavior.</p>
        
        <h3>Access Control Issues</h3>
        <p>Improperly implemented access controls can allow unauthorized users to execute privileged functions.</p>
        
        <h2>Security Best Practices</h2>
        <h3>1. Use Established Patterns</h3>
        <p>Leverage well-tested patterns like OpenZeppelin's contracts for common functionality such as access control, token standards, and security utilities.</p>
        
        <h3>2. Implement Proper Access Controls</h3>
        <p>Use role-based access control and ensure that sensitive functions are properly protected.</p>
        
        <h3>3. Follow the Checks-Effects-Interactions Pattern</h3>
        <p>Always perform checks first, then update state, and finally interact with external contracts.</p>
        
        <h2>Testing and Auditing</h2>
        <p>Comprehensive testing and professional audits are crucial for smart contract security. Consider both unit tests and integration tests, and always have your contracts audited by reputable security firms before mainnet deployment.</p>
        
        <h2>Tools for Security Analysis</h2>
        <p>Several tools can help identify vulnerabilities in your smart contracts:</p>
        <ul>
          <li><strong>Slither:</strong> Static analysis framework for Solidity</li>
          <li><strong>Mythril:</strong> Security analysis tool for Ethereum smart contracts</li>
          <li><strong>Echidna:</strong> Property-based fuzzer for Ethereum smart contracts</li>
        </ul>
      `,
      tags: ["Technical", "Security", "Tutorial"],
      author: "Sarah Kim",
      publishedAt: "2025-01-14",
      readTime: "15 min read",
      image: "/blog-smart-contract-security.png",
      featured: false,
      views: 1923,
      likes: 567,
      comments: [
        {
          id: 1,
          author: "DevSecOps",
          content:
            "This should be required reading for all smart contract developers. Security should never be an afterthought.",
          publishedAt: "2025-01-15",
          likes: 31,
        },
      ],
    },
    "3": {
      id: 3,
      title: "NFT Market Analysis: Trends and Future Predictions",
      excerpt:
        "Deep dive into current NFT market trends, analyzing trading volumes, popular collections, and what the future holds for digital collectibles.",
      content: `
        <p>The NFT market has experienced tremendous growth and volatility over the past few years. This comprehensive analysis examines current trends, market dynamics, and future predictions for the digital collectibles space.</p>
        
        <h2>Current Market Overview</h2>
        <p>The NFT market has matured significantly since its explosive growth in 2021. While trading volumes have stabilized, the market has shown signs of increased sophistication and utility-focused projects.</p>
        
        <h2>Key Trends Shaping the Market</h2>
        <h3>1. Utility-Driven NFTs</h3>
        <p>The market is shifting from purely speculative assets to NFTs that provide real utility, such as access to exclusive communities, gaming assets, or membership benefits.</p>
        
        <h3>2. Gaming Integration</h3>
        <p>Play-to-earn games and blockchain gaming platforms are driving significant NFT adoption, creating sustainable demand for digital assets.</p>
        
        <h3>3. Brand Adoption</h3>
        <p>Major brands are increasingly exploring NFTs for customer engagement, loyalty programs, and digital marketing initiatives.</p>
        
        <h2>Market Challenges</h2>
        <ul>
          <li>Regulatory uncertainty in various jurisdictions</li>
          <li>Environmental concerns regarding energy consumption</li>
          <li>Market saturation and quality concerns</li>
          <li>Technical barriers for mainstream adoption</li>
        </ul>
        
        <h2>Future Predictions</h2>
        <p>Looking ahead, we expect to see continued growth in utility-focused NFTs, increased integration with traditional industries, and the development of more sophisticated marketplaces and tools.</p>
      `,
      tags: ["Analysis", "NFT", "Market"],
      author: "Michael Torres",
      publishedAt: "2025-01-13",
      readTime: "8 min read",
      image: "/blog-nft-market-analysis.png",
      featured: true,
      views: 3156,
      likes: 445,
      comments: [
        {
          id: 1,
          author: "NFTCollector",
          content:
            "Great analysis! The shift towards utility-driven NFTs is definitely something I've noticed in my collecting.",
          publishedAt: "2025-01-14",
          likes: 18,
        },
      ],
    },
    "4": {
      id: 4,
      title: "Getting Started with Web3 Development: A Beginner's Roadmap",
      excerpt:
        "Your complete roadmap to becoming a Web3 developer, covering essential tools, frameworks, and learning resources.",
      content: `
        <p>Web3 development represents the future of decentralized applications and blockchain technology. This comprehensive roadmap will guide you through the essential skills, tools, and resources needed to become a proficient Web3 developer.</p>
        
        <h2>Understanding the Web3 Stack</h2>
        <p>Web3 development involves several layers of technology:</p>
        <ul>
          <li><strong>Blockchain Layer:</strong> Ethereum, Polygon, Solana, etc.</li>
          <li><strong>Smart Contracts:</strong> Solidity, Rust, Vyper</li>
          <li><strong>Frontend:</strong> React, Next.js, Web3.js, Ethers.js</li>
          <li><strong>Storage:</strong> IPFS, Arweave</li>
          <li><strong>Indexing:</strong> The Graph Protocol</li>
        </ul>
        
        <h2>Essential Skills to Develop</h2>
        <h3>1. Blockchain Fundamentals</h3>
        <p>Start by understanding how blockchains work, consensus mechanisms, and the principles of decentralization.</p>
        
        <h3>2. Smart Contract Development</h3>
        <p>Learn Solidity for Ethereum-based development. Understand contract deployment, testing, and security best practices.</p>
        
        <h3>3. Frontend Integration</h3>
        <p>Master connecting web applications to blockchain networks using libraries like Web3.js or Ethers.js.</p>
        
        <h2>Development Tools and Frameworks</h2>
        <ul>
          <li><strong>Hardhat:</strong> Development environment for Ethereum</li>
          <li><strong>Truffle:</strong> Development framework for Ethereum</li>
          <li><strong>Remix:</strong> Online IDE for smart contract development</li>
          <li><strong>MetaMask:</strong> Browser wallet for testing</li>
          <li><strong>Ganache:</strong> Personal blockchain for development</li>
        </ul>
        
        <h2>Learning Path</h2>
        <ol>
          <li>Learn blockchain basics and cryptocurrency fundamentals</li>
          <li>Set up your development environment</li>
          <li>Write your first smart contract</li>
          <li>Build a simple DApp frontend</li>
          <li>Deploy to testnet and mainnet</li>
          <li>Explore advanced topics like DeFi and NFTs</li>
        </ol>
        
        <h2>Resources for Learning</h2>
        <ul>
          <li>CryptoZombies - Interactive Solidity tutorial</li>
          <li>Ethereum.org documentation</li>
          <li>OpenZeppelin contracts library</li>
          <li>Web3 University courses</li>
          <li>Buildspace projects</li>
        </ul>
        
        <h2>Building Your Portfolio</h2>
        <p>Create a portfolio of projects that demonstrate your skills:</p>
        <ul>
          <li>A simple token contract</li>
          <li>A decentralized voting system</li>
          <li>An NFT marketplace</li>
          <li>A DeFi protocol (lending/borrowing)</li>
        </ul>
        
        <h2>Career Opportunities</h2>
        <p>Web3 development offers numerous career paths including smart contract developer, DApp developer, blockchain architect, and protocol engineer. The demand for skilled Web3 developers continues to grow across the industry.</p>
      `,
      tags: ["Beginner", "Tutorial", "Development"],
      author: "Emma Rodriguez",
      publishedAt: "2025-01-12",
      readTime: "10 min read",
      image: "/blog-web3-development.png",
      featured: false,
      views: 4521,
      likes: 678,
      comments: [
        {
          id: 1,
          author: "AspireDev",
          content: "This roadmap is exactly what I needed! Starting with CryptoZombies as suggested.",
          publishedAt: "2025-01-13",
          likes: 25,
        },
        {
          id: 2,
          author: "CodeNewbie",
          content: "Great breakdown of the Web3 stack. The learning path is very helpful for beginners.",
          publishedAt: "2025-01-13",
          likes: 19,
        },
      ],
    },
    "5": {
      id: 5,
      title: "The Future of Decentralized Autonomous Organizations (DAOs)",
      excerpt:
        "Examining the evolution of DAOs, their current challenges, and the potential impact on traditional organizational structures.",
      content: `
        <p>Decentralized Autonomous Organizations (DAOs) represent a revolutionary approach to organizational governance and decision-making. This article explores the current state of DAOs, their challenges, and their potential to reshape how we think about organizations.</p>
        
        <h2>What are DAOs?</h2>
        <p>DAOs are organizations governed by smart contracts and operated through collective decision-making by token holders. They aim to eliminate traditional hierarchical structures and enable transparent, democratic governance.</p>
        
        <h2>Current State of DAOs</h2>
        <p>The DAO ecosystem has grown significantly, with various types emerging:</p>
        <ul>
          <li><strong>Protocol DAOs:</strong> Governing DeFi protocols like Uniswap and Aave</li>
          <li><strong>Investment DAOs:</strong> Collective investment vehicles</li>
          <li><strong>Social DAOs:</strong> Community-driven organizations</li>
          <li><strong>Service DAOs:</strong> Providing services to the Web3 ecosystem</li>
        </ul>
        
        <h2>Key Challenges</h2>
        <h3>1. Governance Participation</h3>
        <p>Low voter turnout and concentration of voting power among large token holders remain significant challenges.</p>
        
        <h3>2. Legal Framework</h3>
        <p>The legal status of DAOs varies by jurisdiction, creating uncertainty for participants and limiting mainstream adoption.</p>
        
        <h3>3. Technical Limitations</h3>
        <p>Current blockchain infrastructure limitations affect the scalability and efficiency of DAO operations.</p>
        
        <h2>Innovations and Solutions</h2>
        <p>The DAO space is rapidly evolving with new governance mechanisms, delegation systems, and legal frameworks being developed to address current limitations.</p>
        
        <h2>Future Outlook</h2>
        <p>DAOs have the potential to transform various industries by enabling more democratic, transparent, and efficient organizational structures. As technology and legal frameworks mature, we expect to see increased adoption across different sectors.</p>
      `,
      tags: ["Opinion", "DAO", "Analysis"],
      author: "David Park",
      publishedAt: "2025-01-11",
      readTime: "7 min read",
      image: "/blog-dao-future.png",
      featured: false,
      views: 1876,
      likes: 234,
      comments: [
        {
          id: 1,
          author: "DAOEnthusiast",
          content:
            "Excellent analysis of the current DAO landscape. The governance participation issue is particularly important.",
          publishedAt: "2025-01-12",
          likes: 12,
        },
      ],
    },
    "6": {
      id: 6,
      title: "Layer 2 Solutions Comparison: Optimism vs Arbitrum vs Polygon",
      excerpt:
        "Comprehensive comparison of popular Layer 2 scaling solutions, analyzing their features, performance, and ecosystem development.",
      content: `
        <p>Layer 2 scaling solutions have become essential for Ethereum's scalability. This comprehensive comparison examines three leading Layer 2 solutions: Optimism, Arbitrum, and Polygon, analyzing their technical approaches, performance, and ecosystem development.</p>
        
        <h2>Understanding Layer 2 Solutions</h2>
        <p>Layer 2 solutions are built on top of Ethereum (Layer 1) to improve scalability, reduce transaction costs, and maintain security. They process transactions off-chain while periodically settling on the main Ethereum network.</p>
        
        <h2>Optimism</h2>
        <h3>Technical Approach</h3>
        <p>Optimism uses Optimistic Rollups, which assume transactions are valid by default and only run fraud proofs when challenged.</p>
        
        <h3>Key Features</h3>
        <ul>
          <li>EVM compatibility</li>
          <li>7-day withdrawal period</li>
          <li>Lower gas fees than Ethereum mainnet</li>
          <li>Growing DeFi ecosystem</li>
        </ul>
        
        <h2>Arbitrum</h2>
        <h3>Technical Approach</h3>
        <p>Arbitrum also uses Optimistic Rollups but with a more sophisticated fraud proof system called interactive fraud proofs.</p>
        
        <h3>Key Features</h3>
        <ul>
          <li>Full EVM compatibility</li>
          <li>Multi-round fraud proofs</li>
          <li>Arbitrum One and Arbitrum Nova networks</li>
          <li>Large ecosystem of dApps</li>
        </ul>
        
        <h2>Polygon</h2>
        <h3>Technical Approach</h3>
        <p>Polygon uses a Proof-of-Stake sidechain approach with periodic checkpoints to Ethereum.</p>
        
        <h3>Key Features</h3>
        <ul>
          <li>Fast finality (2-3 seconds)</li>
          <li>Very low transaction costs</li>
          <li>Mature ecosystem</li>
          <li>Multiple scaling solutions (PoS, zkEVM, etc.)</li>
        </ul>
        
        <h2>Performance Comparison</h2>
        <table>
          <tr>
            <th>Metric</th>
            <th>Optimism</th>
            <th>Arbitrum</th>
            <th>Polygon</th>
          </tr>
          <tr>
            <td>TPS</td>
            <td>~2,000</td>
            <td>~4,000</td>
            <td>~7,000</td>
          </tr>
          <tr>
            <td>Finality</td>
            <td>7 days</td>
            <td>7 days</td>
            <td>2-3 seconds</td>
          </tr>
          <tr>
            <td>Gas Costs</td>
            <td>Low</td>
            <td>Low</td>
            <td>Very Low</td>
          </tr>
        </table>
        
        <h2>Ecosystem Development</h2>
        <p>All three solutions have vibrant ecosystems with major DeFi protocols, NFT marketplaces, and gaming applications. The choice often depends on specific use case requirements and user preferences.</p>
        
        <h2>Conclusion</h2>
        <p>Each Layer 2 solution has its strengths and trade-offs. Optimism and Arbitrum offer stronger security guarantees through their connection to Ethereum, while Polygon provides faster finality and lower costs. The multi-chain future likely includes all these solutions serving different use cases.</p>
      `,
      tags: ["Technical", "Analysis", "Guide"],
      author: "Lisa Wang",
      publishedAt: "2025-01-10",
      readTime: "14 min read",
      image: "/blog-layer2-comparison.png",
      featured: true,
      views: 2634,
      likes: 389,
      comments: [
        {
          id: 1,
          author: "L2Researcher",
          content:
            "Great comparison! The performance table is particularly useful for developers choosing a Layer 2 solution.",
          publishedAt: "2025-01-11",
          likes: 28,
        },
        {
          id: 2,
          author: "EthDev",
          content:
            "This helped me understand the trade-offs between different Layer 2 approaches. Thanks for the detailed analysis!",
          publishedAt: "2025-01-11",
          likes: 15,
        },
      ],
    },
  }

  return posts[id] || null
}

const relatedPosts = [
  {
    id: 3,
    title: "Understanding Gas Optimization Techniques",
    tags: ["Development", "Gas"],
    readTime: "8 min",
    image: "/blog-gas-optimization.png",
  },
  {
    id: 4,
    title: "Building Your First DApp: A Step-by-Step Guide",
    tags: ["Tutorial", "DApp"],
    readTime: "20 min",
    image: "/blog-dapp-guide.png",
  },
  {
    id: 5,
    title: "The Future of Cross-Chain Interoperability",
    tags: ["Technology", "Cross-Chain"],
    readTime: "10 min",
    image: "/blog-cross-chain.png",
  },
]

export default function BlogDetailPage() {
  const params = useParams()
  const router = useRouter()
  const [post, setPost] = useState<BlogPost | null>(null)
  const [loading, setLoading] = useState(true)
  const [liked, setLiked] = useState(false)
  const [bookmarked, setBookmarked] = useState(false)

  useEffect(() => {
    const postData = getBlogById(params.id as string)
    setPost(postData)
    setLoading(false)
  }, [params.id])

  if (loading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
      </div>
    )
  }

  if (!post) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold mb-4">Post Not Found</h1>
          <Button onClick={() => router.back()}>Go Back</Button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        {/* Header */}
        <div className="flex items-center gap-4 mb-8">
          <Button variant="ghost" size="sm" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Blog
          </Button>
        </div>

        {/* Post Header */}
        <div className="mb-8">
          {post.featured && (
            <Badge variant="secondary" className="mb-4">
              Featured Post
            </Badge>
          )}

          <h1 className="text-4xl font-bold mb-4 text-balance">{post.title}</h1>

          <div className="flex items-center gap-6 text-muted-foreground mb-6">
            <div className="flex items-center gap-2">
              <User className="h-4 w-4" />
              <span>{post.author}</span>
            </div>
            <div className="flex items-center gap-2">
              <Clock className="h-4 w-4" />
              <span>{post.readTime}</span>
            </div>
            <div className="flex items-center gap-2">
              <Eye className="h-4 w-4" />
              <span>{post.views.toLocaleString()} views</span>
            </div>
            <span>{post.publishedAt}</span>
          </div>

          <div className="flex items-center gap-3 mb-6">
            <Button variant="outline" size="sm" onClick={() => setLiked(!liked)}>
              <ThumbsUp className={`h-4 w-4 mr-2 ${liked ? "fill-blue-500 text-blue-500" : ""}`} />
              {liked ? post.likes + 1 : post.likes}
            </Button>
            <Button variant="outline" size="sm" onClick={() => setBookmarked(!bookmarked)}>
              <Bookmark className={`h-4 w-4 mr-2 ${bookmarked ? "fill-yellow-500 text-yellow-500" : ""}`} />
              {bookmarked ? "Saved" : "Save"}
            </Button>
            <Button variant="outline" size="sm">
              <Share2 className="h-4 w-4 mr-2" />
              Share
            </Button>
          </div>
        </div>

        {/* Featured Image */}
        <div className="mb-8 rounded-xl overflow-hidden">
          <Image
            src={post.image || "/placeholder.svg"}
            alt={post.title}
            width={800}
            height={400}
            className="w-full h-auto"
          />
        </div>

        {/* Post Content */}
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          <div className="lg:col-span-3">
            <div
              className="prose prose-lg max-w-none dark:prose-invert"
              dangerouslySetInnerHTML={{ __html: post.content }}
            />

            {/* Tags */}
            <div className="mt-8 pt-8 border-t border-border">
              <h3 className="text-lg font-semibold mb-4">Tags</h3>
              <div className="flex flex-wrap gap-2">
                {post.tags.map((tag) => (
                  <Badge key={tag} variant="outline">
                    {tag}
                  </Badge>
                ))}
              </div>
            </div>

            {/* Comments Section */}
            <div className="mt-8 pt-8 border-t border-border">
              <h3 className="text-xl font-semibold mb-6 flex items-center gap-2">
                <MessageCircle className="h-5 w-5" />
                Comments ({post.comments.length})
              </h3>

              <div className="space-y-6">
                {post.comments.map((comment) => (
                  <div key={comment.id} className="bg-card p-6 rounded-lg border">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
                          <User className="h-4 w-4 text-primary" />
                        </div>
                        <div>
                          <span className="font-medium">{comment.author}</span>
                          <div className="text-sm text-muted-foreground">{comment.publishedAt}</div>
                        </div>
                      </div>
                      <Button variant="ghost" size="sm">
                        <ThumbsUp className="h-4 w-4 mr-1" />
                        {comment.likes}
                      </Button>
                    </div>
                    <p className="text-muted-foreground">{comment.content}</p>
                  </div>
                ))}
              </div>

              {/* Add Comment */}
              <div className="mt-6 p-6 bg-card rounded-lg border">
                <h4 className="font-medium mb-4">Leave a Comment</h4>
                <div className="space-y-4">
                  <textarea
                    placeholder="Share your thoughts..."
                    className="w-full p-3 border border-border rounded-md bg-background resize-none"
                    rows={4}
                  />
                  <Button>Post Comment</Button>
                </div>
              </div>
            </div>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Author Info */}
            <Card>
              <CardHeader>
                <CardTitle>About the Author</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex items-center gap-3 mb-4">
                  <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center">
                    <User className="h-6 w-6 text-primary" />
                  </div>
                  <div>
                    <h4 className="font-semibold">{post.author}</h4>
                    <p className="text-sm text-muted-foreground">Blockchain Developer</p>
                  </div>
                </div>
                <p className="text-sm text-muted-foreground">
                  Experienced blockchain developer and technical writer with expertise in DeFi protocols and smart
                  contract security.
                </p>
              </CardContent>
            </Card>

            {/* Related Posts */}
            <Card>
              <CardHeader>
                <CardTitle>Related Posts</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {relatedPosts.map((related) => (
                    <div key={related.id} className="group cursor-pointer">
                      <div className="flex gap-3">
                        <div className="w-16 h-16 rounded-lg overflow-hidden flex-shrink-0">
                          <Image
                            src={related.image || "/placeholder.svg"}
                            alt={related.title}
                            width={64}
                            height={64}
                            className="w-full h-full object-cover"
                          />
                        </div>
                        <div className="flex-1">
                          <h4 className="font-medium text-sm group-hover:text-primary transition-colors line-clamp-2">
                            {related.title}
                          </h4>
                          <div className="flex items-center gap-2 mt-1 text-xs text-muted-foreground">
                            <span>{related.readTime}</span>
                          </div>
                          <div className="flex flex-wrap gap-1 mt-2">
                            {related.tags.slice(0, 2).map((tag) => (
                              <Badge key={tag} variant="outline" className="text-xs">
                                {tag}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
